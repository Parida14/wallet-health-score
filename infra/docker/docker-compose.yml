version: "3.9"

name: wallet-health

services:
  postgres:
    image: postgres:16-alpine
    container_name: whs-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-wallet_health}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_password}
      POSTGRES_DB: ${POSTGRES_DB:-wallet_health_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
    container_name: whs-api
    environment:
      API_HOST: 0.0.0.0
      API_PORT: 8000
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-wallet_health}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_password}
      POSTGRES_DB: ${POSTGRES_DB:-wallet_health_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    container_name: whs-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-09-22T00-00-00Z
    container_name: whs-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-db:
    image: postgres:16-alpine
    container_name: whs-airflow-db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    image: apache/airflow:2.9.3
    container_name: whs-airflow-init
    depends_on:
      airflow-db:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "airflow db init && \
       airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true"
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-config:/opt/airflow/config
      - ../../apps/etl/dags:/opt/airflow/dags:rw

  airflow-webserver:
    image: apache/airflow:2.9.3
    container_name: whs-airflow-web
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__WEBSERVER__RBAC: "True"
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
    ports:
      - "8080:8080"
    command: ["airflow", "webserver"]
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-config:/opt/airflow/config
      - ../../apps/etl/dags:/opt/airflow/dags:rw

  airflow-scheduler:
    image: apache/airflow:2.9.3
    container_name: whs-airflow-scheduler
    depends_on:
      airflow-db:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
    command: ["airflow", "scheduler"]
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-config:/opt/airflow/config
      - ../../apps/etl/dags:/opt/airflow/dags:rw

volumes:
  postgres-data:
  minio-data:
  airflow-db-data:
  airflow-dags:
  airflow-logs:
  airflow-config:


